<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cuckoo's  Blog]]></title>
  <link href="http://jarvisxiong.github.io/myblog/atom.xml" rel="self"/>
  <link href="http://jarvisxiong.github.io/myblog/"/>
  <updated>2015-05-25T22:38:21+08:00</updated>
  <id>http://jarvisxiong.github.io/myblog/</id>
  <author>
    <name><![CDATA[jarvisxiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java-redis-cache-consistency]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-redis-cache-consistency/"/>
    <updated>2015-05-25T22:28:37+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-redis-cache-consistency</id>
    <content type="html"><![CDATA[<p>1.背景：数据库是MySQL，缓存是Redis，redis主要用来读缓存，现需要检测数据可和缓存之间的一致性，确保从缓存读取的数据是最新的。现阶段检验一致性的方法是迭代比较每条记录是否一致。</p>

<p>2.问题：目前检验的方法不宜扩展，容易受限。如果数据量越来越大、记录数越多，则检查一致性的时间会越来越长，这对运行的服务也是有影响的。</p>

<p>3.改进：设置了两个定时器</p>

<p>一个是定时（时间间隔短如10min）扫描检查数据的一些重要属性如库存价格。</p>

<p>二是定时（时间间隔长如1h）扫描所有数据的属性值</p>

<h3>回答</h3>

<p>首先“ 确保从缓存读取的数据是最新的”这个想法就有点走入误区，既然是缓存，那么必然是有对实时性可以有一定的容忍度的数据，容忍度的时间可以是5分钟，也可以是5小时，取决于不同的数据类型。然后，一定要求是实时性的数据，就不应该从缓存里读取，比如 库存 。再比如价格，既可以选择直接从数据库读实时数据，也可以选择缓存较短时间，甚至做到一个网站里不同页面的价格读取采用不同的方案，以“京东商城”为例，京东的商品列表页面的价格是有5分钟的缓存时间的，而它的商品详情页的价格却是实时的（信息来源于刘强东早期的微博）。</p>

<p>这种writer-reader架构，一般思路是在缓存更新阶段由writer来解决一致性问题，当数据库数据变化时，同步更新redis并确保缓存更新成功。</p>

<p>作为完整性判断，可以不检查全部的属性，而对数据使用一个自增的版本号（或时间戳）来判断是否最新。</p>

<p>作为后置的检测，可以优化来降低扫描的代价，如只针对最近一个时间周期内（如10min）数据库中更新过的数据，这个集合应该比较小，去redis中进行检查的代价会比较低。</p>

<p><a href="http://www.cnblogs.com/zhaoguihua/p/redis-005.html">http://www.cnblogs.com/zhaoguihua/p/redis-005.html</a>
<a href="http://www.infoq.com/cn/articles/cache-coherency-primer/">http://www.infoq.com/cn/articles/cache-coherency-primer/</a>
<a href="http://blog.csdn.net/tonysz126/article/details/8280696">http://blog.csdn.net/tonysz126/article/details/8280696</a>
<a href="http://blog.csdn.net/vhomes/article/details/8194670">http://blog.csdn.net/vhomes/article/details/8194670</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[restful风格api]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-restful-style/"/>
    <updated>2015-05-25T22:08:50+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-restful-style</id>
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a>
<a href="http://www.cnblogs.com/artech/p/3506553.html">http://www.cnblogs.com/artech/p/3506553.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[restful风格api]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-restful-style/"/>
    <updated>2015-05-25T22:08:50+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-restful-style</id>
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a>
<a href="http://www.cnblogs.com/artech/p/3506553.html">http://www.cnblogs.com/artech/p/3506553.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java String内存分析]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-string-model/"/>
    <updated>2015-05-25T21:05:49+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-string-model</id>
    <content type="html"><![CDATA[<h2>Java中内存分析：</h2>

<h5>栈(Stack) ：存放基本类型的变量数据和对象的引用，但对象本身不存放在栈中，而是存放在（new 出来的对象）或者常量池中（字符串常量对象存放在常量池中）。</h5>

<h5>堆(heap)：存放所有new出来的对象。</h5>

<h5>常量池(constant pool)：在堆中分配出来的一块存储区域，存放储显式的String常量和基本类型常量(float、int等)。另外，可以存储不经常改变的东西(public static final)。常量池中的数据可以共享。</h5>

<h5>静态存储：存放静态成员（static定义的）。</h5>

<p><img src="http://pic002.cnblogs.com/images/2012/267603/2012012520033341.png" alt="" /></p>

<p>1)String a = &ldquo;abc&rdquo;;①
String b = &ldquo;abc&rdquo;;②
　　  分析：
　　  ①代码执行后在常量池(constant pool)中创建了一个值为abc的String对象，②执行时，因为常量池中存在"abc"所以就不再创建新的String对象了。</p>

<p>2)String   c   =   new   String(&ldquo;xyz&rdquo;);①
　　String   d   =   new   String(&ldquo;xyz&rdquo;);②
　　分析：①Class被加载时，"xyz"被作为常量读入，在常量池(constant pool)里创建了一个共享的值为"xyz"的String对象；然后当调用到new String(&ldquo;xyz&rdquo;)的时候，会在堆(heap)里创建这个new   String(&ldquo;xyz&rdquo;)对象;②由于常量池(constant pool)中存在"xyz"所以不再创建"xyz"，然后创建新的new String(&ldquo;xyz&rdquo;)。</p>

<p>3)String   s1   =   new   String(&ldquo;xyz&rdquo;);     //创建二个对象(常量池和栈中)，一个引用
　　String   s2   =   new   String(&ldquo;xyz&rdquo;);     //创建一个对象(栈中)，并且以后每执行一次创建一个对象，一个引用</p>

<p>　　String   s3   =   &ldquo;xyz&rdquo;;     //创建一个对象(常量池中)，一个引用 <br/>
　　String   s4   =   &ldquo;xyz&rdquo;;     //不创建对象(共享上次常量池中的数据)，只是创建一个新的引用
4)</p>

<p>public class TestStr {
  public static void main(String[] args) {
    // 以下两条语句创建了1个对象。"凤山"存储在字符串常量池中
    String str1 = &ldquo;凤山&rdquo;;
    String str2 = &ldquo;凤山&rdquo;;
    System.out.println(str1==str2);//true</p>

<pre><code>//以下两条语句创建了3个对象。"天峨"，存储在字符串常量池中，两个new String()对象存储在堆内存中 
String str3 = new String("天峨"); 
String str4 = new String("天峨"); 
System.out.println(str3==str4);//false 

//以下两条语句创建了1个对象。9是存储在栈内存中 
int i = 9; 
int j = 9; 
System.out.println(i==j);//true 

//由于没有了装箱，以下两条语句创建了2个对象。两个1对象存储在堆内存中 
Integer l1 = new Integer(1); 
Integer k1 = new Integer(1); 
System.out.println(l1==k1);//false 
</code></pre>

<p>　　//以下两条语句创建了1个对象。1对象存储在栈内存中。自动装箱时对于值从127之间的值，使用一个实例。
    Integer l = 20;//装箱
    Integer k = 20;//装箱
    System.out.println(l==k);//true
//以下两条语句创建了2个对象。i1,i2变量存储在栈内存中，两个256对象存储在堆内存中
    Integer i1 = 256;
    Integer i2 = 256;
    System.out.println(i1==i2);//false
  }
}</p>

<pre><code>    String a = "a";
    String b = "b";
    String d = "a"+"b";
    String c = "ab";
    String f = a+b;
    System.out.println(c==d);
    System.out.println(f==d);
    System.out.println(f==c);
</code></pre>

<p>从上面的结果中我们不难看出，只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</p>

<p>但是有一种情况需要引起我们的注意。请看下面的代码：  Java代码</p>

<pre><code>     // 常量A 
     public static final String A = "ab";   
     // 常量B 
     public static final String B = "cd";   
     public static void main(String[] args) {
    // 将两个常量用+连接对s进行初始化 
     String s = A + B;  
     String t = "abcd";
     if (s == t) { 
        System.out.println("s等于t，它们是同一个对象");  
     }else {
       System.out.println("s不等于t，它们不是同一个对象");   
    ｝
</code></pre>

<p> 这段代码的运行结果如下：     s等于t，它们是同一个对象     这又是为什么呢？原因是这样的，对于常量来讲，它的值是固定的，因此在编译期就能被确定了，而变量的值只有到运行时才能被确定，因为这个变量可以被不同的方法调用，从而可能引起值的改变。在上面的例子中，A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：  Java代码
   1. String s=A+B;     等同于：  Java代码
   1. String s=&ldquo;ab&rdquo;+&ldquo;cd&rdquo;;</p>

<p><a href="http://wenku.baidu.com/link?url=F8_SDJwO1fgu2BDQ6yAWJRciQtKhRlrqQ9H8N1oZzLg_jB_pfIZ6ZZbkNuUSJEraOTYo8cULayM27Slrk02lS7l9GCLrI29FxezjyC6smJi">http://wenku.baidu.com/link?url=F8_SDJwO1fgu2BDQ6yAWJRciQtKhRlrqQ9H8N1oZzLg_jB_pfIZ6ZZbkNuUSJEraOTYo8cULayM27Slrk02lS7l9GCLrI29FxezjyC6smJi</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cache]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/20/cache/"/>
    <updated>2015-05-20T22:39:43+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/20/cache</id>
    <content type="html"><![CDATA[<h3>用Memcached，对于缓存对象大小有要求，单个对象不得大于1MB，且不支持复杂的数据类型，譬如SET等。基于这些限制，有必要考虑Redis！</h3>

<pre><code>http://blog.csdn.net/it_man/article/details/9730605
http://www.cnblogs.com/edisonfeng/p/3571870.html
http://www.xdata.me/?p=262
http://www.infoq.com/cn/articles/tq-why-choose-redis
http://www.oschina.net/question/259434_50355?sort=time
http://blog.csdn.net/colorant/article/details/21089057
http://blog.csdn.net/hguisu/article/details/8836819
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown-pad]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/18/markdown-pad/"/>
    <updated>2015-05-18T22:02:47+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/18/markdown-pad</id>
    <content type="html"><![CDATA[<h2>Welcome to MarkdownPad 2</h2>

<p><strong>MarkdownPad</strong> is a full-featured Markdown editor for Windows.</p>

<h3>Built exclusively for Markdown</h3>

<p>Enjoy first-class Markdown support with easy access to  Markdown syntax and convenient keyboard shortcuts.</p>

<p>Give them a try:</p>

<ul>
<li><strong>Bold</strong> (<code>Ctrl+B</code>) and <em>Italic</em> (<code>Ctrl+I</code>)</li>
<li>Quotes (<code>Ctrl+Q</code>)</li>
<li>Code blocks (<code>Ctrl+K</code>)</li>
<li>Headings 1, 2, 3 (<code>Ctrl+1</code>, <code>Ctrl+2</code>, <code>Ctrl+3</code>)</li>
<li>Lists (<code>Ctrl+U</code> and <code>Ctrl+Shift+O</code>)</li>
</ul>


<h3>See your changes instantly with LivePreview</h3>

<p>Don&rsquo;t guess if your <a href="http://markdownpad.com">hyperlink syntax</a> is correct; LivePreview will show you exactly what your document looks like every time you press a key.</p>

<h3>Make it your own</h3>

<p>Fonts, color schemes, layouts and stylesheets are all 100% customizable so you can turn MarkdownPad into your perfect editor.</p>

<h3>A robust editor for advanced Markdown users</h3>

<p>MarkdownPad supports multiple Markdown processing engines, including standard Markdown, Markdown Extra (with Table support) and GitHub Flavored Markdown.</p>

<p>With a tabbed document interface, PDF export, a built-in image uploader, session management, spell check, auto-save, syntax highlighting and a built-in CSS management interface, there&rsquo;s no limit to what you can do with MarkdownPad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux vim学习]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/17/vim-study/"/>
    <updated>2015-05-17T18:58:58+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/17/vim-study</id>
    <content type="html"><![CDATA[<h1>linux 操作杂谈</h1>

<p>   本篇文章是在linux上学习新语法的时候，最linux的一些操作</p>

<ul>
<li>一般的命令都会有  &ndash;help</li>
<li>创建层级目录  mkdir -p  examples/base</li>
<li>查看文件的类型格式   file  base.text</li>
<li>linux主机域名   hostsname  vim /etc/hosts</li>
</ul>


<h1>vim常用操作</h1>

<h3>1. 各种插入模式</h3>

<pre><code>a → 在光标后插入
o → 在当前行后插入一个新行
O → 在当前行前插入一个新行
cw → 替换从光标所在位置后到一个单词结尾的字符
</code></pre>

<h3>2.简单的光标移动</h3>

<pre><code>0 → 数字零，到行头
^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ → 到本行行尾
g_ → 到本行最后一个不是blank字符的位置。
/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）
</code></pre>

<h3>3.拷贝/粘贴</h3>

<pre><code>（p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）
 P → 粘贴
 yy → 拷贝当前行当行于 ddP
</code></pre>

<h3>4.Undo/Redo</h3>

<pre><code> u → undo
&lt;C-r&gt; → redo
</code></pre>

<h3>5.打开/保存/退出/改变文件(Buffer)</h3>

<pre><code>:e &lt;path/to/file&gt; → 打开一个文件
:w → 存盘
:saveas &lt;path/to/file&gt; → 另存为 &lt;path/to/file&gt;
:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）
</code></pre>

<h3>更多功能请参考<a href="http://coolshell.cn/articles/5426.html" target="_blank"> [ 简明 Vim 练级攻略 ]</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blog搭建]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/17/blog%E6%90%AD%E5%BB%BA/"/>
    <updated>2015-05-17T14:07:43+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/17/blog搭建</id>
    <content type="html"><![CDATA[<p>octopress博客搭建和个性化配置
 A1c120da1e76 grunmin 2013.12.25 11:25* 1621 字 2459 次阅读
使用octopress搭建博客的人，大概都会喜欢写关于如何搭建配置octopress的文章。因为它的高定制性，为极客们带来很多乐趣。从首页的配置，到分类，评论，个人信息，社会化分享等的配置，内容繁多。而且这是我第二次搭建octopress环境了，发现上一次的配置有一部分不能clone到本机上。因此，把配置的过程记录下来是十分有必要的。
我的意愿是记录配置的过程，顺便整理大牛们关于这方面的一些说明。网络上相关资料有很多，没有实践过的没有摘录在这里。所有的代码实现都是直接引用前辈们的。另外，本博的配置环境是linux fedora 18.</p>

<p>octopress官方网站
octopress的配置都可以在官网上找到。事实上，遇到问题查询官网文档是最有效率的方法。</p>

<p>github的设置
创建仓库
登陆github网站，注册一个用户，假设为grunmin。
创建一个仓库，命名为username.github.com，例如grunmin.github.com</p>

<p>使用密钥登陆github
[[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa     #生成密钥对
按默认一直确认即可。
在github帐号设置里找到ssh的设置，添加一个ssh key。
进入~/.ssh/找到id_rsa.pub文件，把里面的内容填到key里，title不填。
这样做的好处是之后push到仓库上时可以不用输入密码。</p>

<h3>安装ruby</h3>

<p>查看ruby版本</p>

<pre><code>ruby --version  # 必须显示1.9.3
</code></pre>

<p>安装方法：</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></pre>

<p>若有显示命名未找到，直接下载安装即可。</p>

<h3>安装octopress</h3>

<p>在安装octopress之前，确保已安装git。</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
bundle install
rake install
</code></pre>

<p>这里容易出现三个问题：
1、已安装rvm和bundler，但显示找不到命令。</p>

<p>用绝对路径：/home/username/.rvm/bin/rvm
    /home/username/.rvm/bin/bundler
2、执行bundler install时显示：GemfileNotFound error?</p>

<p>可能在安装的过程中退出了octopress目录，进入后执行即可。
3、执行rake install时显示</p>

<pre><code>rake aborted!
No Rakefile found (looking for: rakefile, Rakefile, rakefile.rb, Rakefile.rb)
</code></pre>

<p>同理，进入安装目录即可。</p>

<p>将博客部署到github上
    rake setup_github_pages
此时会要求输入仓库的url，可以在github仓库内容业的右下角找到。
例如我的是git@github.com:grunmin/grunmin.github.com.git
成功后即可用</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>生成新文章，文章在source/_post/目录下，文件名构成为时间和标题的拼音。之后执行</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>此时可以预览(浏览器打开localhost:4000可看到效果。）如果没有问题，则执行</p>

<pre><code>rake deploy 
git add .
git commit -m "comment"
git push origin source
</code></pre>

<p>保存到仓库。
需要注意的是执行git命令时应处于octopress目录，并且checkout到source分支，</p>

<pre><code>cd octopress
git checkout source
git add .
git commit -m "comment"
git push origin souce
</code></pre>

<h3>octopress博客的个性化配置</h3>

<p>添加文章分类（category)</p>

<h4>1、增加category_list插件</h4>

<p>将下面的代码写到plugins/category_list_tag.rb</p>

<p>module Jekyll
  class CategoryListTag &lt; Liquid::Tag
    def render(context)
      html = &ldquo;&rdquo;
      categories = context.registers[:site].categories.keys
      categories.sort.each do |category|
        posts_in_category = context.registers[:site].categories[category].size
        category_dir = context.registers[:site].config[&lsquo;category_dir&rsquo;]
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, &lsquo;-&rsquo;).gsub(/-{2,}/, &lsquo;-&rsquo;).downcase)
        html &lt;&lt; &ldquo;<li class='category'><a href='http://jarvisxiong.github.io/myblog/#{category_url}/'>#{category} (#{posts_in_category})</a></li>\n&rdquo;
      end
      html
    end
  end
end</p>

<p>Liquid::Template.register_tag(&lsquo;category_list&rsquo;, Jekyll::CategoryListTag)</p>

<h4>2、增加侧边栏</h4>

<p>将下面的代码写到source/_includes/asides/category_list.html</p>

<pre><code>&lt;section&gt;
  &lt;h1&gt;Categories&lt;/h1&gt;
    &lt;ul id="categories"&gt;
      {% category_list %} 
    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>修改_config.yml文件，找到default_asides:
在中括号内添加
asides/category_list.html</p>

<p>添加的位置决定在页面显示的位置，注意用逗号隔开。
用vim编辑器粘贴的话可能会自动缩进，启用粘贴模式或用其他编辑器即可。</p>

<p>添加社会化评论
octopress 产生静态网页，不支持评论功能，所以我们用第三方评论系统。好消息是octopress已为我们配置好了Disqus，我们只需要稍微填写以下信息即可。
1、首先在Disqus 注册一个帐号，点击添加到我的网页，添加站点信息，比如我的grunmin.github.io
2、修改_config.yml文件，找到这一段：</p>

<h1>Disqus Comments</h1>

<p>disqus_short_name:
disqus_show_comment_count: false
添加你的disqus用户名，并把false修改成true即可。注意冒号后面有空格。
此外，可以用国内的多说系统，速度较快，且比较符合景德镇村民的需要。之前我用的就是这个，但是没有记录配置过程，这次克隆时多说系统没有成功启动，因此不折腾了，有需要的话可以自行谷歌。</p>

<p>导航栏设置
导航栏的设置在source_includes\custom\navigation.html
我们可以将Blog和Archives修改为首页和归档，也可以在此添加一个标签页，此时应使用命令rake new_page[&lsquo;about&rsquo;]创建一个页面，页面路径为source\about\index.markdown;
修改后的文件如下：</p>

<pre><code>&lt;ul class="main-navigation"&gt; 
    &lt;li&gt;&lt;a href="http://jarvisxiong.github.io/myblog/"&gt;首页&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="/blog/archives"&gt;归档&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="http://jarvisxiong.github.io/myblog/about"&gt;关于&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
</code></pre>

<p>从新电脑上恢复博客内容：
如果电脑重装了系统，或者要在另一台电脑编写博客，可以这样设置。
找到博客仓库的url，执行</p>

<pre><code>git clone -b source (url) octopress   #把source 克隆到本地octopress目录上
cd octopress
git clone (url) _deploy   #克隆master分支，它存放着博客内容。
gem install bundler
bundle install
rake install
rake setup_github_pages
</code></pre>

<p>之后操作同上，有问题照葫芦画瓢。</p>

<p>其他问题
如果不能生成或者推送博客了，可以采取下述措施：</p>

<p>在命令行输入/bin/bash &ndash;login，重试
查看ruby的版本，如果不是1.9.3的话，执行rvm use 1.9.3</p>

<h3>Ocotpress博客配置</h3>

<p>更改下面的配置后，还需要运行 rake generate、rake deploy等等命令的。</p>

<p>创建一个新的页面也与此类似，命令是：</p>

<pre><code>rake new_page[super-awesome]
rake new_post[super-awesome] /发表日志
</code></pre>

<p>1、默认的博客运行成功的话，就需要按照自己的要求对博客配置进行修改了，主要是修改Octopress根目录下的主配置文件_config.yml。</p>

<pre><code>url:  http://username.github.com                 # 博客地址
title:  蔓草札记                                            # 博客标题
subtitle:  感受生活，感悟工作，感触心灵           # 副标题
author:  xhhjin                                                       # 作者  
simple_search:  http://www.google.com.hk/search     # 搜索引擎
description:                                                            # 关于博客的描述
subscribe_rss:  /atom.xml                  # Rss订阅地址, 默认是  /atom.xml
subscribe_email:                               # 提供Email订阅的地址
email:                                              # Rss订阅的Email地址
root:  /               # 博客路径，默认是“/“，如果你打算在子目录中，记得修改这个路径
permalink: /blog/:year/:month/:day/:title/           # 文章的固定链接形式
</code></pre>

<p>2、更换主题</p>

<p>主题位于 octopress/.theme 目录下，默认主题为 classic。 如果需要更改主题（可在网上查找），下载后将主题也放在.theme目录下即可，如果主题名字为blog_theme，那么安装主题时输入以下命令即可：</p>

<pre><code>rake install [‘blog_theme’]
</code></pre>

<h3>绑定域名</h3>

<p>Github Pages绑定域名的方法有点特殊，需要在Octopress/source目录下建个无后缀的CNAME文本文件，文件内容就是你的域名，例如github.xuhehuan.com，然后修改A纪录到207.97.227.245 ，或者 CNAME 指向 username.github.com，下面就等着解析生效了。</p>

<h3>参考</h3>

<p>1.<a href="http://cn.soulmachine.me//blog/20130401/">http://cn.soulmachine.me//blog/20130401/</a></p>

<p>2.<a href="http://nkcoder.github.io/blog/20140105/github-pages-and-octopress-blog-built">http://nkcoder.github.io/blog/20140105/github-pages-and-octopress-blog-built</a></p>

<p>3.<a href="http://www.v2ex.com/t/136903">http://www.v2ex.com/t/136903</a></p>

<h3>未解决的问题</h3>

<p> 安装规定的步骤执行source不知道怎上传</p>
]]></content>
  </entry>
  
</feed>
