<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Cuckoo's  Blog]]></title>
  <link href="http://jarvisxiong.github.io/myblog/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://jarvisxiong.github.io/myblog/"/>
  <updated>2015-05-25T22:41:48+08:00</updated>
  <id>http://jarvisxiong.github.io/myblog/</id>
  <author>
    <name><![CDATA[jarvisxiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java-redis-cache-consistency]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-redis-cache-consistency/"/>
    <updated>2015-05-25T22:28:37+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-redis-cache-consistency</id>
    <content type="html"><![CDATA[<p>1.背景：数据库是MySQL，缓存是Redis，redis主要用来读缓存，现需要检测数据可和缓存之间的一致性，确保从缓存读取的数据是最新的。现阶段检验一致性的方法是迭代比较每条记录是否一致。</p>

<p>2.问题：目前检验的方法不宜扩展，容易受限。如果数据量越来越大、记录数越多，则检查一致性的时间会越来越长，这对运行的服务也是有影响的。</p>

<p>3.改进：设置了两个定时器</p>

<p>一个是定时（时间间隔短如10min）扫描检查数据的一些重要属性如库存价格。</p>

<p>二是定时（时间间隔长如1h）扫描所有数据的属性值</p>

<h3>回答</h3>

<p>首先“ 确保从缓存读取的数据是最新的”这个想法就有点走入误区，既然是缓存，那么必然是有对实时性可以有一定的容忍度的数据，容忍度的时间可以是5分钟，也可以是5小时，取决于不同的数据类型。然后，一定要求是实时性的数据，就不应该从缓存里读取，比如 库存 。再比如价格，既可以选择直接从数据库读实时数据，也可以选择缓存较短时间，甚至做到一个网站里不同页面的价格读取采用不同的方案，以“京东商城”为例，京东的商品列表页面的价格是有5分钟的缓存时间的，而它的商品详情页的价格却是实时的（信息来源于刘强东早期的微博）。</p>

<p>这种writer-reader架构，一般思路是在缓存更新阶段由writer来解决一致性问题，当数据库数据变化时，同步更新redis并确保缓存更新成功。</p>

<p>作为完整性判断，可以不检查全部的属性，而对数据使用一个自增的版本号（或时间戳）来判断是否最新。</p>

<p>作为后置的检测，可以优化来降低扫描的代价，如只针对最近一个时间周期内（如10min）数据库中更新过的数据，这个集合应该比较小，去redis中进行检查的代价会比较低。</p>

<p><a href="http://www.cnblogs.com/zhaoguihua/p/redis-005.html">http://www.cnblogs.com/zhaoguihua/p/redis-005.html</a>
<a href="http://www.infoq.com/cn/articles/cache-coherency-primer/">http://www.infoq.com/cn/articles/cache-coherency-primer/</a>
<a href="http://blog.csdn.net/tonysz126/article/details/8280696">http://blog.csdn.net/tonysz126/article/details/8280696</a>
<a href="http://blog.csdn.net/vhomes/article/details/8194670">http://blog.csdn.net/vhomes/article/details/8194670</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[restful风格api]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-restful-style/"/>
    <updated>2015-05-25T22:08:50+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-restful-style</id>
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a>
<a href="http://www.cnblogs.com/artech/p/3506553.html">http://www.cnblogs.com/artech/p/3506553.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java String内存分析]]></title>
    <link href="http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-string-model/"/>
    <updated>2015-05-25T21:05:49+08:00</updated>
    <id>http://jarvisxiong.github.io/myblog/blog/2015/05/25/java-string-model</id>
    <content type="html"><![CDATA[<h2>Java中内存分析：</h2>

<h5>栈(Stack) ：存放基本类型的变量数据和对象的引用，但对象本身不存放在栈中，而是存放在（new 出来的对象）或者常量池中（字符串常量对象存放在常量池中）。</h5>

<h5>堆(heap)：存放所有new出来的对象。</h5>

<h5>常量池(constant pool)：在堆中分配出来的一块存储区域，存放储显式的String常量和基本类型常量(float、int等)。另外，可以存储不经常改变的东西(public static final)。常量池中的数据可以共享。</h5>

<h5>静态存储：存放静态成员（static定义的）。</h5>

<p><img src="http://pic002.cnblogs.com/images/2012/267603/2012012520033341.png" alt="" /></p>

<p>1)String a = &ldquo;abc&rdquo;;①
String b = &ldquo;abc&rdquo;;②
　　  分析：
　　  ①代码执行后在常量池(constant pool)中创建了一个值为abc的String对象，②执行时，因为常量池中存在"abc"所以就不再创建新的String对象了。</p>

<p>2)String   c   =   new   String(&ldquo;xyz&rdquo;);①
　　String   d   =   new   String(&ldquo;xyz&rdquo;);②
　　分析：①Class被加载时，"xyz"被作为常量读入，在常量池(constant pool)里创建了一个共享的值为"xyz"的String对象；然后当调用到new String(&ldquo;xyz&rdquo;)的时候，会在堆(heap)里创建这个new   String(&ldquo;xyz&rdquo;)对象;②由于常量池(constant pool)中存在"xyz"所以不再创建"xyz"，然后创建新的new String(&ldquo;xyz&rdquo;)。</p>

<p>3)String   s1   =   new   String(&ldquo;xyz&rdquo;);     //创建二个对象(常量池和栈中)，一个引用
　　String   s2   =   new   String(&ldquo;xyz&rdquo;);     //创建一个对象(栈中)，并且以后每执行一次创建一个对象，一个引用</p>

<p>　　String   s3   =   &ldquo;xyz&rdquo;;     //创建一个对象(常量池中)，一个引用 <br/>
　　String   s4   =   &ldquo;xyz&rdquo;;     //不创建对象(共享上次常量池中的数据)，只是创建一个新的引用
4)</p>

<p>public class TestStr {
  public static void main(String[] args) {
    // 以下两条语句创建了1个对象。"凤山"存储在字符串常量池中
    String str1 = &ldquo;凤山&rdquo;;
    String str2 = &ldquo;凤山&rdquo;;
    System.out.println(str1==str2);//true</p>

<pre><code>//以下两条语句创建了3个对象。"天峨"，存储在字符串常量池中，两个new String()对象存储在堆内存中 
String str3 = new String("天峨"); 
String str4 = new String("天峨"); 
System.out.println(str3==str4);//false 

//以下两条语句创建了1个对象。9是存储在栈内存中 
int i = 9; 
int j = 9; 
System.out.println(i==j);//true 

//由于没有了装箱，以下两条语句创建了2个对象。两个1对象存储在堆内存中 
Integer l1 = new Integer(1); 
Integer k1 = new Integer(1); 
System.out.println(l1==k1);//false 
</code></pre>

<p>　　//以下两条语句创建了1个对象。1对象存储在栈内存中。自动装箱时对于值从127之间的值，使用一个实例。
    Integer l = 20;//装箱
    Integer k = 20;//装箱
    System.out.println(l==k);//true
//以下两条语句创建了2个对象。i1,i2变量存储在栈内存中，两个256对象存储在堆内存中
    Integer i1 = 256;
    Integer i2 = 256;
    System.out.println(i1==i2);//false
  }
}</p>

<pre><code>    String a = "a";
    String b = "b";
    String d = "a"+"b";
    String c = "ab";
    String f = a+b;
    System.out.println(c==d);
    System.out.println(f==d);
    System.out.println(f==c);
</code></pre>

<p>从上面的结果中我们不难看出，只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</p>

<p>但是有一种情况需要引起我们的注意。请看下面的代码：  Java代码</p>

<pre><code>     // 常量A 
     public static final String A = "ab";   
     // 常量B 
     public static final String B = "cd";   
     public static void main(String[] args) {
    // 将两个常量用+连接对s进行初始化 
     String s = A + B;  
     String t = "abcd";
     if (s == t) { 
        System.out.println("s等于t，它们是同一个对象");  
     }else {
       System.out.println("s不等于t，它们不是同一个对象");   
    ｝
</code></pre>

<p> 这段代码的运行结果如下：     s等于t，它们是同一个对象     这又是为什么呢？原因是这样的，对于常量来讲，它的值是固定的，因此在编译期就能被确定了，而变量的值只有到运行时才能被确定，因为这个变量可以被不同的方法调用，从而可能引起值的改变。在上面的例子中，A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：  Java代码
   1. String s=A+B;     等同于：  Java代码
   1. String s=&ldquo;ab&rdquo;+&ldquo;cd&rdquo;;</p>

<p><a href="http://wenku.baidu.com/link?url=F8_SDJwO1fgu2BDQ6yAWJRciQtKhRlrqQ9H8N1oZzLg_jB_pfIZ6ZZbkNuUSJEraOTYo8cULayM27Slrk02lS7l9GCLrI29FxezjyC6smJi">http://wenku.baidu.com/link?url=F8_SDJwO1fgu2BDQ6yAWJRciQtKhRlrqQ9H8N1oZzLg_jB_pfIZ6ZZbkNuUSJEraOTYo8cULayM27Slrk02lS7l9GCLrI29FxezjyC6smJi</a></p>
]]></content>
  </entry>
  
</feed>
